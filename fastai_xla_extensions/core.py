# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['XLA_AVAILABLE', 'XLAOptimProxy', 'XLAOptCallback']

# Cell
#colab
#hide_output
XLA_AVAILABLE = True
try:
    import torch_xla.core.xla_model as xm
except ImportError as e:
    XLA_AVAILABLE = False
    # import warnings
    # warnings.warn('fastai_xla_extensions requires Pytorch-XLA, will not add XLAOptCallback to learner',
                #  RuntimeWarning)

# Internal Cell
if not globals().get('XLA_AVAILABLE'):
    from types import SimpleNamespace
    import torch.cuda
    def fake_opt_step(opt,barrier=False):
        opt.step()
    def fake_device(n=None, devkind=None):
        gpu_available = torch.cuda.is_available()
        return torch.device(torch.cuda.current_device()) if gpu_available else torch.device('cpu')
    xm = SimpleNamespace(
        optimizer_step = fake_opt_step,
        xla_device = fake_device
    )

# Cell
class XLAOptimProxy:
    "Proxy optimizer to override `opt.step` with Pytorch XLA sync method `xm.optimizer_step` "
    def __init__(self,opt, barrier=True):
        self.opt = opt
        self._barrier = barrier

    def xla_step(self):
        xm.optimizer_step(self.opt,barrier=self._barrier) # sync on gradient update

    def __getattr__(self,name):
        if name == 'step': # override proxying for step
            return getattr(self,'xla_step')
        if name in ('barrier','_barrier'):
            return getattr(self,name)

        # proxy everything else
        return getattr(self.opt,name)
    @property
    def barrier(self): return self._barrier
    @barrier.setter
    def barrier(self,v): self._barrier = v

# Cell
from fastai.callback.core import Callback

class XLAOptCallback(Callback):
    'Callback to replace `opt.step` with `xm.optimizer_step(opt)` as required to run on TPU'
    def __init__(self, barrier=True):
        self._barrier = barrier

    def before_fit(self):
        'replace opt with proxy which calls `xm.optimizer_step` instead of `opt.step`'
        if self.learn.opt is not None:
            if not isinstance(self.learn.opt,XLAOptimProxy):
                opt = self.learn.opt
                self.learn.opt = XLAOptimProxy(opt, barrier=self._barrier)

    def after_fit(self):
        'restore original opt '
        if isinstance(self.learn.opt, XLAOptimProxy):
            opt = self.learn.opt.opt
            self.learn.opt = opt
    @property
    def barrier(self): return self._barrier
    @barrier.setter
    def barrier(self,v): self._barrier = v

# Cell
if globals().get('XLA_AVAILABLE'):
    import fastai.torch_core
    from torch import Tensor
    def default_device(use_cuda=-1):
        "Return `TPU` as default device"
        return xm.xla_device()
    def to_device(b, device=None):
        "Recursively put `b` on `device`."
        if device is None: device=default_device()
        # print(f'setting device to {device}')
        def _inner(o):
            return o.to(device, non_blocking=True) if isinstance(o,Tensor) else o.to_device(device) if hasattr(o, "to_device") else o
        return fastai.torch_core.apply(_inner, b)
    # override default_device implementations
    fastai.torch_core.default_device = default_device
    fastai.torch_core.to_device = to_device

# Cell
if globals().get('XLA_AVAILABLE'):
    from fastcore.foundation import defaults
    if hasattr(defaults,'callbacks'):
        if XLAOptCallback not in defaults.callbacks:
            defaults.callbacks.append(XLAOptCallback)
    else:
        defaults.callbacks = [XLAOptCallback]